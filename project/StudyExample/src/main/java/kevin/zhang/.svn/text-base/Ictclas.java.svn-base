package kevin.zhang;

import java.io.File;

import kevin.zhang.NLPIR;
import org.apache.log4j.Logger;

public class Ictclas
{
	// log
	static private Logger log = Logger.getLogger(Ictclas.class.getName());

	private String ictclas_dir;
	private String userdict;

	private NLPIR nlpir;
	
	public Ictclas() {	
		String[] path_candidate = new String[3];
    	path_candidate[0] = System.getProperty("user.dir").replaceAll("%20", " ");								//Non web path
    	path_candidate[1] = this.getClass().getResource("/").getPath().substring(1).replaceAll("%20", " ");		//windows web path
    	path_candidate[2] = this.getClass().getResource("/").getPath().replaceAll("%20", " ");					//linux web path
    	File file;
    	String path = "";
    	for(int i = 0; i < 3; i++){
    		file = new File(path_candidate[i] + "plugins");
    		if(file.exists())
    		{
    			path = path_candidate[i];
    			break;
    		}
    	}
		ictclas_dir = path + "plugins/common/";
		userdict = path + "plugins/common/userdict.txt";
		System.out.println(path);
		
		nlpir = new NLPIR();
		init(ictclas_dir);
		loadDic(userdict);
	}

	/**
     * 分词系统初始化
     * @param path: 分词相关文件的路径
     * @return 是否初始化成功
     */
	public boolean init(String path) {
		try {
			if (NLPIR.NLPIR_Init(path.getBytes(), 0) == false) {
				log.info("NLPIR_Init Fail!");
				return false;
			}
			else {
				log.info("NLPIR_Init Succeed!" + "\n");
			}
		}
		catch (Exception e) {
			log.error(e.getMessage(), e);
			e.printStackTrace();
		}
		nlpir.NLPIR_SetPOSmap(1);
		return true;
	}
	
	/**
     * 加载用户词典
     * @param sPath: 词典文件的路径和文件名
     */
	public void loadDic(String sPath) {
		long begin = System.currentTimeMillis();
		int n = nlpir.NLPIR_ImportUserDict(sPath.getBytes());
		long end = System.currentTimeMillis();
		log.info("import words: " + n + "  timeuse: " + (end - begin) + "\n");
	}
	
	/**
     * 对字符串进行分词
     * @param input: 待分词的字符串
     * @return 分词后的字符串
     */
	public String clasSentence(String input) {
		String output = "";
		try {		
			byte nativeBytes[] = nlpir.NLPIR_ParagraphProcess(input.getBytes("GB2312"), 1);
			output = new String(nativeBytes, "GB2312");
		}
		catch (Exception ex) {
			log.error(ex.getMessage(), ex);
			ex.printStackTrace();
		}
		return output;
	}
	
	public void exit() {
		NLPIR.NLPIR_Exit();
	}
}
